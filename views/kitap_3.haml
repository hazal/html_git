-# coding: UTF-8

%div.row
  %div.leaderboard
    %h1 Bölüm 3 
    %h4 
      Yazar : 
      %a(href="http://twitter.com/#!/huwcol" target="_blank") Huw Collingbourne
      \- 
      %a(href="http://www.sapphiresteel.com/" target="_blank") www.sapphiresteel.com
    %h4 Çeviren : Ümit Kayacık

%br

%div.row
  %div.span12
    %h3  Stringler ve Range
    %p 
      Programımın şimdiye kadarki kısmında stringleri birçok kez kullandım. Gerçekte 
      kitabın en başında bir string kullanılmıştı. Tekrar yazalım:
    %br
    
    :coderay
      #!Ruby
      puts 'hello world'
    %br
    
    %p
      Bu ilk programda tek tırnakla çevrili bir string varken, aşağıdaki çift tırnakla 
      çevrili:
    %br
    
    :coderay
      #!Ruby
      print('Enter your name: ' )
      name = gets()
      puts( "Hello \#{name}" )
    %br
    
    %p
      Çift tırnakla belirtilen stringler tek tırnakla belirtilenlere göre çok daha 
      fazla iş yaparlar. Özellikle kendilerine verilen bir kısım kodu işletmeleri 
      ilginçtir. Bir kodun string içinde işletilmesini istiyorsanız, 
      %b # 
      işareti arkasından gelen süslü parantezler arasına yazabilirsiniz.
    %p
      Yukarıdaki örnekte 
      %b \#{name} 
      yazısyla Ruby'ye 
      %b name 
      değişkeninin değerini alıp bu yazı yerine o değerin yazılması emrediliyor. 
      Böylece eğer 
      %b name 
      değeri "Fred" ise "Hello Fred" stringi gösterilecektir. 
      %b 1strings.rb 
      örnek programı çift tırnaklı bu yapının içinde kod işletilmesi hakkında birkaç 
      değişik örnek veriyor.
    %br
    
    %h4.sag 1strings.rb
    :coderay
      #!Ruby
      class MyClass
        attr_accessor :name
        attr_accessor :number
        
        def initialize( aName, aNumber )
          @name	= aName
          @number = aNumber
        end
        
        def ten
          return 10
        end
        
      end


      ob = MyClass.new( "James Bond", "007" )
      puts( "Çift Tırnaklı: Benim adım \#{ob.name} ve benim numaram \#{ob.number}" )
      puts( "Burada'ki bir tab\tbir new line\nbir hesaplama \#{2*3} ve bir metod çağrısı \#{ob.ten}" )
      puts( 'Tek Tırnaklı: Benim adım \#{ob.name} ve benim numaram \#{ob.number}' )
      puts( 'Burada\'ki bir tab\tbir new line\nbir hesaplama \#{2*3} ve bir metod çağrısı \#{ob.ten}' )
    %br
    
    %p
      Çift tırnaklı stringler sadece 
      %b ob.name 
      gibi değerleri göstermez, 
      %b 2*3 
      gibi işlem sonuçlarını da gösterir ya da 
      %b ob.ten 
      gibi bir metod sonucu da olabilir. Ayrıca "escape karakterler" de kullanılabilir 
      burada "\n" ve "\t" yeni satır ve tab işaretlerini temsil ediyor.
    %p
      Tek tırnaklı bir string aynı işletimleri yapmaz. Tek tırnaklılarda da escape 
      karakter olabilir ancak sadece kendisinden sonra gelen işaretin karakter 
      olarak kullanılacağını belirtir. Bu tek tırnaklı string içinde tek tırnak işareti 
      olacağı zaman faydalıdır.
    %br
    
    :coderay
      #!Ruby
      'It\'s my party'
    %br
    
    %p
      %b ten 
      isimli metodun 10 değerini geri döndüğü düşünüldüğünde şöyle bir kod 
      yazılabilir:
    %br
    
    :coderay
      #!Ruby
      puts( "Burada'ki bir tab\tbir new line\nbir hesaplama \#{2*3} ve bir metod çağrısı \#{ob.ten}" )
    %br
    
    %p
      Bu çift tırnaklı bir string olduğu için gömülü elemanlar işlenecek ve 
      aşağıdaki yazı gösterilecektir.
    %br
    
    :coderay
      #!Bash
      Burada'ki bir tab     bir new line
      bir hesaplama 6 ve bir metod çağrısı 10
    %br
    
    %p
      Şimdi bir de tek tırnak kullanılınca ne oluyor bakalım:
    %br
    
    :coderay
      #!Ruby
      puts( 'Burada\'ki bir tab\tbir new line\nbir hesaplama \#{2*3} ve bir metod çağrısı \#{ob.ten}' )
    %br
    
    %h3 Kullanıcı Tanıtımlı String Sınırlayıcılar
    %p
      Eğer bazı sebeplerle tek ya da çift tırnaklı string işinize gelmezse - mesela 
      stringiniz çok sayıda tırnak işareti içeriyor ve siz habire ters slash 
      kullanmak istemiyorsunuz - stringlerinize başka bir şekilde sınırlayıcı 
      koyabilirsiniz. 
    %br
    
    %h4.sag 2strings.rb
    :coderay
      #!Ruby
      class MyClass
        attr_accessor :name
        attr_accessor :number
        
        def initialize( aName, aNumber )
          @name	= aName
          @number = aNumber
        end
        
        def ten
          return 10
        end
        
      end

      ob = MyClass.new( "James Bond", "007" )
      puts( %Q/Çift Tırnak: Benim adım \#{ob.name} ve numaram \#{ob.number}/ )
      puts( %/Bu bir tab\tbir new line\nbir hesap \#{2*3} ve bir metod çağrısı \#{ob.ten}/ )
      puts( %q/Tek tırnak: Benim adım \#{ob.name} ve numaram \#{ob.number}/ )
          # Not: Tek tırnak için %q kullanırken, escape karakteri kullanmak gerekmez
      puts( %q/Bu bir tab\tbir new line\nbir hesap \#{2*3} ve bir metod çağrısı \#{ob.ten}/ )
    %br
    
    %p
      Tek ve çift tırnak stringler için standart alternatif sınırlayıcılar, çift tırnak 
      için 
      %b %Q
      ve 
      %b / 
      veya 
      %b %/ 
      ve 
      %b /, 
      tek tırnak için 
      %b %q 
      ve 
      %b /.
      Yani...
    %br
    
    :coderay
      #!Ruby
      %Q/This is the same as a double-quoted string./
      %/This is also the same as a double-quoted string./
      %q/And this is the same as a single-quoted string/
    %br
    
    %p
      Bundan başka kendi string sınırlayıcılarınızı da tayin edebilirsiniz. Bunlar 
      alfanümerik olmayan karakterler olmalıdır ve pound ve hash (#) karakteri 
      gibi Ruby'de anlamı olan karakterler bile kullanılabilir. Seçtiğiniz karakteri 
      %b %Q 
      veya 
      %b %q 
      arkasına koymalısınız. Ayrıca stringin sonuna da aynı karakteri koymayı 
      unutmayın. Eğer sınırlayıcınız köşeli parantezse string sonunda da kapatın. 
    %br
    
    :coderay
      #!Ruby
      %Q[This is a string]
    %br
    
    %h4.sag 3string.rb
    :coderay
      #!Ruby
      class MyClass
        attr_accessor :name
        attr_accessor :number
        
        def initialize( aName, aNumber )
          @name	= aName
          @number = aNumber
        end
        
        def ten
          return 10
        end
        
      end
      
      ob = MyClass.new( "James Bond", "007" )
      puts( %Q$Benim adım \#{ob.name} ve numaram \#{ob.number}$ )
      
      # new line da kullanabilirsiniz
      puts( %Q
      Bu bir tab\tbir new line\nbir hesap \#{2*3} ve bir metod çağrısı \#{ob.ten}
       )
      
      # tab kullanırsak 
      puts( %Q	Benim adım \#{ob.name} ve numaram \#{ob.number}	 )
      
      # * kullanımı - not: eğer stringde * varsa escape karakter gerekir \* in 
      # fakat işlem içinde gerekmez \#{2*3}
      puts( %Q*Bu bir tab\tbir new line\nbir hesap \* işaretiyle \#{2*3} ve bir metod çağrısı \#{ob.ten}* )
      
      # tek tırnaklı # ile
      puts( %q#Benim adım  \\\#{ob.name} ve numaram \\\#{ob.number}# )

      # köşeli parantez [ ve ] kullanımı
      puts( %Q[Bu bir tab\tbir new line\nbir hesap \#{2*3} ve bir metod çağrısı \#{ob.ten}] )
    %br
    
    %p
      Yukarıdaki uygulamada birçok kullanıcı tanımlı string sınırlayıcı örneği 
      görebilirsiniz. Herhalde new line gibi görünmez ya da * gibi kafa 
      karıştıracak karakterleri kullanmanın kafa karıştıracağını söylemeye 
      gerek yok.
      
    %h3 Ters Tırnaklar
    %p
      Bir diğer string türü ters tırnaklarla sınırlanmış stringlerdir. Ruby ters tırnaklar 
      ile çevrili stringi eğer 
      %b print 
      veya 
      %b puts 
      metoduyla alırsa işletim sistemine bir kod olarak algılar. Şimdi Ruby'nin bunu 
      değişik yollarla yaptığını tahmin edebilirsiniz. 
      %b %x/birkomut/ 
      ile 
      %b `birkomut` 
      ve 
      %b %x{birkomut} 
      aynı işi yaparlar. Windows işletim sisteminde örneğin , aşağıdaki satırlar 
      işletim sistemine 
      %b dir 
      komutu gönderirler:
    %br
    
    :coderay
      #!Ruby
      puts(`dir`)
      puts(%x/dir/)
      puts(%x{dir})
    %br
    
    %h4.sag 4backquotes.rb
    :coderay
      #!Ruby
      
      puts( `dir` )
      puts( 'Press Enter')
      gets()
      puts( %x/dir/ )
      puts( 'Press Enter')
      gets()
      puts( %x/echo "hello world"/ )
      puts( 'Press Enter')
      gets()
      puts( %x{notepad} )
      puts( 'Press Enter')
      gets()
      print( "Goodbye \#{%x{calc}}" )
    %br
    
    %p Ayrıca şu şekilde çift tırnak içindeki stringden komut gönderilebilir:
    %br
    
    :coderay
      #!Ruby
      print( "Goodbye \#{%x{calc}}" )
    %br
    
    %p
      Bunu yaparken dikkat edin , önce komut işletilir. Ruby programınız komut 
      bitene kadar bekleyecektir. Buradaki örnekte önce hesap makinası açılacak 
      ne zaman uygulama penceresini kapatırsınız, o zaman "Goodbye" yazısı 
      yazılacaktır.
    %br
    
    %h3 Stringleri İşlemek
    %p
      String konusunu kapatmadan önce, birkaç çok kullanılan string işlevlerine 
      hızlıca bakalım.
    %h4 BİRLEŞTİRMEK (CONCAT) 
    %h4.sag string_concat.rb
    :coderay
      #!Ruby
      # String birleştirmek
      
      # << string birleştirme metodu << FixNum tam sayıları (fakat floatlar değil) stringe çevirir
      # geçerli Fixnum'lar 0 dan 255'e kadardır
      s1 = "Burada " << "bir" << " string var " << 10   # 10.5 gibi bir float ya da 256 sayısı deneyin
      
      # + metodu stringleri birleştirir ama tamsayıları çevirmez
      s2 = "This "  + "is" + " a string "  + 10.to_s    # tamsayı metodla döndürülmüş
      
      # bir boşlukla da stringler birleştirilebilir
      s3 = "This "  "is"  " a string "  + 10.to_s
      
      # virgülle ayrılmış stringler bir array oluşturur. 
      # Array'ler daha anlaşılır olsun diye köşeli parantez içine konur :
      # s4 = ["Bu " , "bir" , " string değil!", 10]
      x = "Bu " , "bir" , " string değil!", 10
      
      puts("puts(s1):" << s1)
      puts("puts(s2):" << s2)
      puts("puts(s3):" << s3)
      print("print (x):" , x, "\n")
      puts("puts(x):", x)
      puts("puts x.class is: " << (x.class).to_s )
    %br
    
    %p
      Stringleri 
      %b << 
      veya 
      %b + 
      ile ya da  sadece  aralarına bir boşluk koyarak birleştirebilirsiniz. Burada 
      "Hello World" stringinin oluşturulması için birleştirme örnekleri görülüyor:
    %br
    
    :coderay
      #!Ruby
      s = "Hello " << "world"
      s = "Hello " + "world"
      s = "Hello "  "world"
    %br
    
    %p
      Unutmayın 
      %b << 
      metodunu kullanırken 0 - 255 arası tamsayıları stringe dönüştürmek gerekmez 
      ama + metodu ya da boşluk karakteri ile birleştiriyorsanız 
      %b to_s 
      metodu ile sayıyı stringe dönüştürmelisiniz. 
    %br
    
    .alert.alert-info
      %b Virgüller Ne Oluyor?
      %p
        Bazen Ruby'de stringler ve diğer veri tiplerini ayırt etmek için virgül 
        kullanıldığına tanık olursunuz. Bazı durumlarda bu virgüller string 
        birleştirmek için kullanılabilir. Örneğin aşağıdaki kod ilk bakışta alt 
        stringlerden bir string oluşturup gösterecek ve üç altstring ve bir tamsayı 
        gösterecek gibi görünüyor.
      %br
      
      :coderay
        #!Ruby
        s4 = "This " , "is" , " not a string!", 10
        print("print (s4):" , s4, "\n") 
      %br
      
      %p
        Gerçekte virgüllerle ayrılmış bir liste array oluşturur - stringlerin sıralanmış bir 
        listesi. 
        %b string_concat.rb 
        programı bunu gösteren örneklere sahip. 
      %p
        Bir array elemanlarını 
        %b puts 
        gibi metodlara gönderirseniz her elemanı ayrı işleyecektir. Yukarıdaki 
        array 
        %b puts 
        komutuna gönderilirse :
      %br
      
      :coderay
        #!Ruby
        puts(s4)
      %br
      
      %p Bu durumda çıktı şöyle olacaktır:
      %br
      
      :coderay
        #!Bash
        This 
        is
         not a string!
        10 
      %br
      
      %p Array yapılarını sonraki bölümde ayrıntılı inceleyeceğiz.
    %br
    
    %h3 String Atamalar
    %p
      Ruby String sınıfı birçok kullanışlı string işleme metoduna sahiptir. Bu 
      metodların bir çoğu yeni bir string nesnesi üretir. Bu yüzden örneğin, 
      aşağıdaki kodda sol taraftaki 
      %b s 
      ile eşitliğin sağ tarafındaki 
      %b s 
      aynı nesne değildir:
    %br
    
    :coderay
      #!Ruby
      s = "hello world"
      s = s + "!"
    %br
    
    %h4.sag string_assign.rb
    :coderay
      #!Ruby
      s = "hello world"
      print( "s='\#{s}' ve s.object_id=\#{s.object_id}\n" )
      s = s + "!"	  # bir yeni string üretildi bu yüzden buradaki 
                        # iki s değişkeni farklı nesneler
      print( "s='\#{s}' ve s.object_id=\#{s.object_id}\n" )
      s = s.capitalize	# bu yeni bir string object üretir
      print( "s='\#{s}' ve s.object_id=\#{s.object_id}\n" )
      s.capitalize!		# ama bu mevcut nesneyi modifye eder
      print( "s='\#{s}' ve s.object_id=\#{s.object_id}\n" )
      s[1] = 'A'			# Bu da mevcutu modifye eder
      print( "s='\#{s}' ve s.object_id=\#{s.object_id}\n" )
      print( " s stringinin ilk karakteri, s[0,1],  '\#{s[0,1].to_s}' ve son karakteri [s-1,1]  \#{s[-1,1].to_s}" )
    %br
    
    %p
      Birkaç string metodu nesneyi değiştirmeden kendisini modifiye eder. Bu 
      metodlar genellikle bir ünlem işareti ile biterler. ( 
      %b capitalize! 
      metodunda olduğu gibi).
    %p
      Şüpheniz varsa nesnenin aynı olup olmadığını id'sinden 
      %b object_id 
      metoduyla kontrol edebilirsiniz. 
      %b string_assign.rb 
      programında yeni string nesnesi üretmeyen birkaç metod gösterdim. 
      Bu programı çalıştırın ve her işlem sonrası 
      %b object_id 
      ile string nesnesinin aynı kalıp kalmadığını kontrol edin.
    %br
    
    %h3 BİR STRING İÇİNDE GEZİNMEK
    %p
      Bir string'i karakterlerden oluşan bir array gibi görerek herhangi bir 
      sıradaki karaktere adının arkasına köşeli parantez içinde sıra sayısını 
      yazarak ulaşabilirsiniz. Ruby stringleri index (gösterge) 0 dan başlayarak 
      adreslenebilir. Bu yüzden mesela içinde 'Hello World' olan 
      %b s 
      stringi '1' nolu indexindeki karakteri (e) 'a' yapmak istersek:
    %br
    
    :coderay
      #!Ruby
      s[1] = 'a'
    %br
    
    %p
      Eğer string'in bir yerindeki karakteri bulmak istiyorsanız :
    %br
    
    :coderay
      #!Ruby
      s = "Hello world"
      puts( s[1] )   
    %br
    
    %p
      Eğer pozisyon 1'den itibaren 3 karakteri almak isterseniz:
    %br
    
    :coderay
      #!Ruby
      puts( s[1,3] )  # 'ell' yazar
    %br
    
    %p
      Bu Ruby'ye 1 nolu pozisyondan başlayarak 3 karakteri almasını söyler. 
      Alternatif olarak iki noktalı range notasyonu da kullanabilirsiniz:
    %br
    
    :coderay
      #!Ruby
      puts( s[0..3] )  # 'Hell' yazar
    %br
    
    .alert.alert-info
      Range hakkında daha fazla bilgi için bölüm sonundaki 
      %b Derin İnceleme 
      kısmına bakın
    %p
      String'ler ayrıca eksi değerlerle de indexlenebilir. -1 değeri son 
      karakteri verir ve 'd' döner:
    %br
    
    :coderay
      #!Ruby
      puts( s[-1,1] )  # prints „d‟
      puts( s[-5,1] )  # prints „w‟
      puts( s[-5,5] )  # prints „world‟
    %br
    
    %h4.sag string_index.rb
    :coderay
      #!Ruby
      s = "Hello world"
      puts( "s=#'{s}'" )
      puts( "s[0]=\#{s[0]}, s[0,1]='\#{s[0,1]}', s[-1]=\#{s[-1]}, s[-1,1]='\#{s[-1,1]}'" )
      puts( "s[0,5]='\#{s[0,5]}' and s[-5,5]='\#{s[-5,5]}'" )
      puts( "s[0..5]='\#{s[0..5]}' and s[-5..-1]='\#{s[-5..-1]}'" )
    %br
    
    %p
      Range içinde eksi değer kullanılacaksa rang'in hem başlangıç hem bitiş 
      değerleri her ikisi de eksi değer olmalıdır:
    %br
    
    :coderay
      #!Ruby
      puts( s[-5..5] )  # bu boş bir string döner!
      puts( s[-5..-1] )  # bu 'world' yazar
    %br
    
    %p
      Son olarak stringleri işlemek için bazı standart fonksiyonlar ile deneme 
      yapmak isteyebilirsiniz. Bu metodlar string üzerinde harfleri büyültüp küçültür, 
      ters çevirir, tekrarlayan karakterleri uzaklaştırır vb. Bunların bir kısmı 
      %b string_methods.rb 
      programında toplanmıştır.
      
    %h4.sag string_methods.rb
    :coderay
      #!Ruby
      # birkaç string metod örneği 
      
      s = "Now is the winter of our discontent
      Made glorious summer by this sun of York;
      And all the clouds that     lour'd upon our house
      In the deep bosom of the ocean buried."
      
      puts( '--- s ---' )
      puts(s)
      
      puts( '--- s.length ---' )
      puts(s.length)
      
      puts( '--- s.reverse! ---' )	# noti ! ile biten metod s'in kendisini değiştirir
      puts(s.reverse!)
      
      puts( '--- s.reverse ---' )		# yeni bir s string nesnesi üretir
      s = s.reverse
      puts(s)
      
      puts( '--- s.upcase ---' )
      s = s.upcase
      puts(s)
      
      puts( '--- s.capitalize ---' )	# ilk karakterler büyük gerisi küçük harf
      s = s.capitalize
      puts(s)
      
      puts( '--- s.swapcase ---' )
      s = s.swapcase
      puts(s)
      
      puts( '--- s.downcase ---' )
      s = s.downcase
      puts(s)
      
      puts( '--- s.insert(7, "NOT " ) ---' ) # index'in oraya string sokuştur
      s = s.insert(7, "NOT " )
      puts(s)
      
      puts( '--- s.squeeze ---' ) # tekrarlayan karakterleri uzaklaştır -örn. "xx   yy" iken "x y" olur
      s = s.squeeze
      puts(s)
      
      puts( '--- s.split ---' )	# kelimelerinden bir array üret
      s = s.split
      puts(s)
    %br
    %hr
    
    %h3 NEWLINE KARAKTERLERİNİN UZAKLAŞTIRILMASI - CHOP ve CHOMP
    %p
      Birkaç kullanışlı string işleme metodu özel övgüyü hakediyor. 
      %b chop 
      ve 
      %b chomp 
      metodları bir string sonundan bazı karakterleri uzaklaştırmak için 
      kullanılabilir. 
      %b chop 
      metodu string'in eğer sonunda carriage return ve newline ("\r\n") varsa 
      onu yoksa son karakteri uzaklaştırarak gerisini döner. 
      %b chomp 
      metodu sadece carriage return veya newline karakterlerini uzaklaştırır. 
      (her ikisi varsa ikisi de uzaklaştırılır)
    %p
      Bu metodlar kullanıcının girdiği ya da dosyadan okunan bir metinden 
      linefeed'leri uzaklaştırmak için kullanılır. Mesela, kullanıcıdan 
      %b gets 
      ile bir satır yazı girmesini istediğinizde, girilen string sonuna newline 
      karakteri eklenerek gelir(record separator).
    %br
    
    .alert.alert-info
      %p
        %b Record Separator - $/
      %p
        Ruby'nin ön tanımlı bir değişkeni vardır , 
        %b $/ 
        , "record separator". Bu değişken 
        %b gets 
        ve 
        %b chomp 
        gibi metodlar tarafından kullanılır. 
        %b gets 
        metodu record separator karakteri gelene kadarki stringi alır. 
        %b chomp 
        metodu sonundan record separator uzaklaştırılmış bir string döner, 
        eğer yoksa stringi değiştirmeden geri döner. İsterseni record separator'ü 
        şöyle değiştirebilirsiniz:
      %br
      
      :coderay
        #!Ruby
        $/="*"  # “*” karakteri şimdi record separator oldu
      %br
      
      %p
        Record separator'ü değiştirdiğinizde bu yeni karakter (veya string) 
        burdan sonra 
        %b gets 
        ve 
        %b chomp 
        gibi metodlar tarafından kullanılır. Örneğin:
      %br
      
      :coderay
        #!Ruby
        $/= "world"  
        s = gets()  # kullanıcı “Had we but world enough and time…” girse
        puts( s )  #  “Had we but world” gösterir
    %br
      
    %p
      newline karakterini uzaklaştırmak için 
      %b chop 
      ya da 
      %b chomp 
      kullanabilirsiniz. Birçok durumda 
      %b chomp 
      tercih edilebilir çünkü sadece varsa newline uzaklaştırılır. Ama 
      %b chop 
      eğer newline yoksa sondaki karakteri uzaklaştırır. İşte bazı örnekler:
    %br
    
    %h4.sag chop_chomp.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      # s1 içinde carriage return\linefeed var
      s1 = "Hello world
      "
      s2 = "Hello world"
      
      puts( "s1='\#{s1}'")
      
      # chop s1'den cr\linefeed uzaklaştırır
      puts( '\#{s1.chop}' )
      puts( "'\#{s1.chop}'" )
      
      # chomp s1'den cr\linefeed uzaklaştırır
      puts( '\#{s1.chomp}' )
      puts( "'\#{s1.chomp}'" )
      
      
      puts( "\ns2 ='\#{s2}'" )
      
      # s2'de  cr\linefeed yok - chop her halikarda son karakteri uçurur!
      puts( '\#{s2.chop}' )
      puts( "'\#{s2.chop}'" )
      
      # fakat chomp stringi değişmeden döndürür
      puts( '\#{s2.chomp}' )
      puts( "'\#{s2.chomp}'" )
      
      # bu başka bir separator olarak 'rld' belirler ve bunu kullanır
      puts( '\#{s2.chomp(\'rld\')}' )
      puts( "'\#{s2.chomp('rld')}'" )
      
      puts( "\nEnter some text..." )
      print( "> " )
      s = gets()
      puts( "Girdiğiniz text:" )
      puts( "'\#{s}'" )
      puts( "Şimdi chomp kullanalım:" )
      puts( "'\#{s.chomp}'" )	# cr\linefeed uzaklaştırılır
      
      $/="world"				# record separator değişir
      puts( "\$/ şimdi \#{$/}, şimdi chomp \#{s2}" )
      puts( "'\#{s2.chomp}'")
      
      puts( "\$/ ayrıca gets() tarafından kullanılır" )
      puts( "Bu stringi girerek deneyin: ")
      puts ( "Hello world, Goodbye" )
      print( "> " )
      s = gets()
      puts( "Girdiğiniz:" )
      puts( "'\#{s}'" )
    %br
    
    %h3 Stringleri Şekillendirmek - Format
    %p
      Ruby yüzde işareti 
      %b % 
      başlayan belirteçler ile stringleri şekillendiren 
      %b printf 
      metoduna sahiptir. Formatlanan string virgülle ayrılmış olarak bir yada 
      birden çok veri elemanı tarafından takip edilir. Veri elemanlarının sayısı 
      format belirteçlerini sayısı kadar olamalıdır. Aktif veri elemanları karşılık 
      gelen format belirteçleri ile yer değişir . Bunlar bazı çok kullanılan 
      format belirteçleri :
    %br
    
    :coderay
      #!Bash
      %d – Ondalık (desimal) sayı
      %f – kayan noktalı (floating point) sayı
      %o – Sekizlik (octal) sayı
      %p – inspect object
      %s – string
      %x – Onaltılı (hexadecimal) sayı
    %br
    
    %p
      Noktalı sayıların gösteriminde noktadan sonraki gösterimi 
      %b %f 
      belirtecinin önüne sayı yazarak belirtirsiniz. Örneğin bu iki dijit bir 
      noktalı sayı gösterir:
    %br
    
    :coderay
      #!Ruby
      printf( "%0.02f", 10.12945 )  # displays 10.13
    %br
    
    %hr
    %h2 Derin İnceleme
    %br
    %h3 Range'ler
    %p
      Ruby'de bir Range başlangıç ve bitiş değerleri belirtilen bir dizi değeri 
      belirten bir sınıftır. Genel olarak tamsayılar için kullanılır ama isterseniz 
      Range'i karakterler ya da noktalı sayılar için de kullanabilirisiniz. Değerler 
      negatif de olabilir ama başlangıç değerin bitiş değerden daha küçük 
      olmasına dikkat edin!
    %br
    
    %h4.sag ranges.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      a = (1..10)
      b = (-10..-1)
      c = (-10..10)
      d = ('a'..'z')		 # iki nokta = array - 'a'..'z'
      e = ('a'...'z')		# üç nokta = array - 'a'..'y'
      f = (1.4..2.5 )		# kayan noktalı range
      
      puts(a)
      puts(b)
      puts(c)
      puts(d)
      puts(e)
      puts(f)
      print(c.to_a)
      puts
      print(d.to_a)
      puts
      print(e.to_a)
      # Kayan noktalı sayı range'i array yapamazsınız 
      # toplam değer sayısı belirsizdir
      # print(f.to_a) # bu kod çalışmaz!
    %br
    
    %p
      Range ifade ederken iki nokta yerine üç nokta kullanırsanız bitiş değeri 
      olarak verdiğiniz değer listeye alınmaz. Range'i oluşturan değerlerden 
      bir array elde etmek için 
      %b to_a 
      metodunu kullanabilirsiniz:
    %br
    
    :coderay
      #!Ruby
      (1..10).to_a
    %br
    
    %p
      Dikkat ederseniz 
      %b to_a 
      metodu kayan noktalı sayılarda range içindeki değerler sınırsız olduğu için 
      kullanılamaz. 
    %br
    
    %h4.sag str_range.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      str_range = ('abc'..'def')
      puts( str_range.to_a )
      puts( (str_range.to_a).length )
    %br
    
    %p
      Stringlerden bile range yapabilirsiniz, ancak dikkatli olun beklemediğiniz sonuçlar 
      alabilirsiniz. Örneğin aşağıdaki range'in alacağı değerleri tahmin edin:
    %br
    
    :coderay
      #!Ruby
      str_range = ('abc'..'def')
    %br
    
    %p
      İlk bakışta "abc" den "def" ye olan bir range fazla elemana sahip olamaz 
      gibi gelebilir. Gerçekte 2110 tane değer alabilir. "abc" , "abd" , "abe" diye 
      sıra sıra değerler alır. Bu durumda şunu söylemek doğru olacaktır, ya bu tip 
      range'leri doğru kullanın ya da iyisimi hiç kullanmayın.
    %br
    
    %h3 BİR RANGE ÜZERİNDE İTERASYON
    %p
      Bir range'i başlangıç değerinden bitiş değerine kadar tüm değerlerle 
      iterasyon yapabilirsiniz. Burada 1'den 10'a kadar sayıları yazan bir kod 
      var:
    %br
    
    %h4.sag for_to.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      for i in (1..10) do
        puts( i )
      end
    %br
    
    %h3 HEREDOC
    %p
      Bir çok satırdan oluşan uzun stringler yazacağı zaman çoğu Ruby 
      programcısı tırnaklar yerine alternatif bir yol olan 'heredoc' string 
      kullanırlar. Bir heredoc başında ve sonunda sınırlayıcı marker'ları bulunan 
      bir yazıdır. Burada EODOC kelimesini sonlandırıcı marker olarak seçtim:
    %br
    
    %h4.sag heredoc.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      # "çift tırnak" heredoc
      hdoc1 = <<EODOC
      I wandered lonely as a \#{"cloud".upcase},
      That floats on high o'er vale and hill...
      EODOC
      
      # 'tek tırnak' heredoc
      hdoc2 = <<'EODOC'
      I wandered lonely as a \#{"cloud".upcase},
      That floats on high o'er vale and hill...
      EODOC
      
      # girintili sonlandırıcılı heredoc
      hdoc3 = <<-EODOC
      I wandered lonely as a \#{"cloud".upcase},
      That floats on high o'er vale and hill...
        EODOC
      
      # ayrılmış kelimeden sonlandırıcılı heredoc
      hdoc4 = <<def
      I wandered lonely as a \#{"cloud".upcase},
      That floats on high o'er vale and hill...
      def
      
      
      def printout( doc )
        puts( "'\#{doc}'" )
      end
      
      def printout2( doc )
        puts( "'\#{doc.chomp}'" )
      end
      
      printout( hdoc1 )
      printout( hdoc2 )
      printout( hdoc3 )
      printout( hdoc4 )
      
      printout2( hdoc4 )
    %br
    
    %p
      Default olarak heredoc'lar çift tırnak olarak kabul edilir. Bu yüzden içlerinde 
      %b \#{"cloud".upcase} 
      gibi yazımlar işletilir. Eğer bir heredoc'un tek tırnak olmasını istiyorsanız 
      sonlandırıcı marker'ı tek tırnaklar içine alın:
    %br
    
    :coderay
      #!Ruby
      hdoc2 = <<'EODOC'
      I wandered lonely as a #{"cloud".upcase},
      That floats on high o'er vale and hill...
      EODOC 
    %br
    
    
    %p.orta Copyright © 2009 Huw Collingbourne
    
    %hr
    %a.btn.btn-large.btn-success.pull-left(href="/kitap/2")
      %i.icon-backward.icon-white
      Bölüm 2 Sınıf Hiyerarşileri ve Sınıf Değişkenleri
    %a.btn.btn-large.btn-success.pull-right(href="/kitap/4")
      Bölüm 4 Array ve Hash Yapılar
      %i.icon-forward.icon-white



%hr

#disqus_thread
%script(type="text/javascript" async="true" src="http://ruby-tr.disqus.com/embed.js")
  
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
